{"version":3,"sources":["auth.js","components/Navbar.js","components/Permission.js","components/Items.js","components/Login.js","components/SignUp.js","components/OpsLog.js","components/Dbsetting.js","App.js","serviceWorker.js","index.js"],"names":["createAuthProvider","getAccessToken","onUpdateToken","token","fetch","method","body","refresh_token","then","r","json","useAuth","login","authFetch","logout","Navbar","logged","useState","uname","setUname","localStorage","getItem","process","headers","JSON","parse","res","rdata","alert","className","to","type","id","href","onClick","Permission","users","setUsers","getUsers","data","useEffect","rowspan","style","verticalAlign","fontWeight","colspan","textAlign","map","user","username","email","checked","permission","API","ItemsPage","setId","editing","setEditing","location","useRef","useLocation","items","setItems","fields","setFields","thisObj","setThisObj","handleSubmit","e","preventDefault","stringify","getItems","key","new_obj","deleteItem","window","confirm","editItem","newObj","forEach","field","c_name","state","columns","Form","Group","Control","onChange","target","value","placeholder","Button","variant","item","LoginPage","useForm","register","reset","errors","formState","navigate","useNavigate","Label","required","maxLength","color","minLength","password","as","console","log","requestOptions","access_token","SignUpPage","watch","show","setShow","serverResponse","setServerResponse","Alert","onClose","dismissible","confirmPassword","message","catch","err","OpsLog","logs","setLogs","getLogs","alog","timestamp","db_uri","tb_name","operation","ops_obj_id","request_body","DBForm","uri","setUri","tablelist","setTablelist","setColumns","checkedColumns","setCheckedColumns","showTableList","setShowtablelist","showColumnList","setShowColumnList","curTable","setCurTable","connectDB","handleSelectTable","table_name","toggleHandler","column","index","Row","Col","xs","Dropdown","onSelect","Toggle","Menu","table","Item","eventKey","display","width","margin","c_type","arr","Object","values","filter","App","path","element","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8c929169.chunk.js","sourcesContent":["import {createAuthProvider} from 'react-token-auth'\r\n\r\nexport const {useAuth, authFetch, login, logout} =\r\n    createAuthProvider({\r\n        getAccessToken: 'access_token',\r\n        onUpdateToken: (token) => fetch('/refresh', {\r\n            method: 'POST',\r\n            body: token.refresh_token\r\n        })\r\n        .then(r => r.json())\r\n    })\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport function getUserName() {\r\n    const token = localStorage.getItem('REACT_TOKEN_AUTH_KEY');\r\n    console.log(token)\r\n\r\n    fetch(`${API}/getUser`,{\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'Authorization': `Bearer ${JSON.parse(token)}`\r\n        }\r\n    })\r\n    .then(res=>res.json())\r\n    .then(rdata=>{\r\n        if (rdata){\r\n            console.log(rdata.uname)\r\n            return rdata.uname\r\n        }\r\n        else{\r\n            alert('Cannot get current user')\r\n        }\r\n\r\n    })\r\n}","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth, logout, getUserName} from '../auth'\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const Navbar = () => {\r\n  const [logged] = useAuth();\r\n  const [uname, setUname] = useState(\"\");\r\n  if(logged){\r\n    const token = localStorage.getItem('REACT_TOKEN_AUTH_KEY');\r\n    // console.log(token)\r\n\r\n    fetch(`${API}/getUser`,{\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'Authorization': `Bearer ${JSON.parse(token)}`\r\n        }\r\n    })\r\n    .then(res=>res.json())\r\n    .then(rdata=>{\r\n        if (rdata){\r\n            // console.log(rdata.uname)\r\n            setUname(rdata.uname)\r\n        }\r\n        else{\r\n            alert('Cannot get current user')\r\n        }\r\n\r\n    })\r\n  }\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <Link className=\"navbar-brand\" to=\"/\">DB CRUD Tool</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav\">\r\n          {logged?\r\n          <>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/opslog\">Operations Log</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/perms\">Permissions</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\">Hi, {uname}!</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" href=\"#\" onClick={()=>{logout()}}>Log Out</a>\r\n            </li>\r\n          </>\r\n          :\r\n          <>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/login\">Log In</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/signup\">Sign Up</Link>\r\n            </li>\r\n          </>\r\n          }\r\n          \r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n  \r\n}\r\n  ","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const Permission = () => {\r\n\r\n  let [users, setUsers] = useState([]);\r\n\r\n  const token = localStorage.getItem('REACT_TOKEN_AUTH_KEY');\r\n\r\n  const getUsers = async () => {\r\n    const res = await fetch(`${API}/users`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        'Authorization': `Bearer ${JSON.parse(token)}`\r\n      }\r\n    });\r\n    const data = await res.json();\r\n    setUsers(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <table className=\"table table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <td rowspan=\"2\" style={{verticalAlign:'middle',fontWeight: 'bold'}}>User Name</td>\r\n              <td rowspan=\"2\" style={{verticalAlign:'middle',fontWeight: 'bold'}}>Email</td>\r\n              <th colspan=\"5\" style={{textAlign:'center',fontWeight: 'bold'}}>Permissions</th>\r\n            </tr>\r\n            <tr>\r\n              <th>Read</th>\r\n              <th>Create</th>\r\n              <th>Update</th>\r\n              <th>Delete</th>\r\n              <th>Admin</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {users.map((user) => (\r\n              <tr key={user.id}>\r\n                <td>{user.username}</td>\r\n                <td>{user.email}</td>\r\n                <td><input checked={(user.permission & 0x01)} type=\"checkbox\"/></td>\r\n                <td><input checked={(user.permission & 0x02)} type=\"checkbox\"/></td>\r\n                <td><input checked={(user.permission & 0x04)} type=\"checkbox\"/></td>\r\n                <td><input checked={(user.permission & 0x08)} type=\"checkbox\"/></td>\r\n                <td><input checked={(user.permission & 0x80)} type=\"checkbox\"/></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {useLocation} from 'react-router-dom';\r\nimport {Form,Button} from 'react-bootstrap'\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const ItemsPage = () => {\r\n  const [id, setId] = useState(\"\");\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const nameInput = useRef(null);\r\n\r\n  const location = useLocation();\r\n\r\n  let [items, setItems] = useState([]);\r\n  let [fields, setFields] = useState([]);\r\n\r\n  const token = localStorage.getItem('REACT_TOKEN_AUTH_KEY');\r\n\r\n  let [thisObj, setThisObj] = useState({});\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!editing) {\r\n      const res = await fetch(`${API}/items`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `Bearer ${JSON.parse(token)}`\r\n        },\r\n        body: JSON.stringify(thisObj)\r\n      });\r\n    } else {\r\n      const res = await fetch(`${API}/items/${id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `Bearer ${JSON.parse(token)}`\r\n        },\r\n        body: JSON.stringify(thisObj)\r\n      });\r\n      const data = await res.json();\r\n      // console.log(data);\r\n      setEditing(false);\r\n      setId(\"\");\r\n    }\r\n\r\n    await getItems();\r\n    var new_obj = {...thisObj};\r\n    for (const key in new_obj) {\r\n      new_obj[key]='';\r\n    }\r\n    setThisObj(new_obj);\r\n\r\n    // nameInput.current.focus();\r\n  };\r\n\r\n  const getItems = async () => {\r\n    const res = await fetch(`${API}/items`);\r\n    const data = await res.json();\r\n    setItems(data);\r\n    // console.log(data);\r\n  };\r\n\r\n  const deleteItem = async (id) => {\r\n    const userResponse = window.confirm(\"Are you sure you want to delete this record?\");\r\n    if (userResponse) {\r\n      const res = await fetch(`${API}/items/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `Bearer ${JSON.parse(token)}`\r\n        }\r\n      });\r\n      await getItems();\r\n    }\r\n  };\r\n\r\n  const editItem = async (id) => {\r\n    const res = await fetch(`${API}/items/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        'Authorization': `Bearer ${JSON.parse(token)}`\r\n      }\r\n    });\r\n    const data = await res.json();\r\n\r\n    setEditing(true);\r\n    setId(id);\r\n\r\n    // console.log(data)\r\n\r\n    // Reset\r\n    var newObj = {};\r\n    fields.forEach((field) => newObj[field.c_name] = data[field.c_name]);\r\n    setThisObj(newObj);\r\n\r\n\r\n    // nameInput.current.focus();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFields(location.state.columns);\r\n    // console.log(location.state.columns);\r\n    getItems();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4\">\r\n        <form className=\"card card-body\">\r\n          {fields.map((field) => (\r\n            <>\r\n              <Form.Group>\r\n                <Form.Control\r\n                  type= \"text\"\r\n                  onChange={(e) => setThisObj({\r\n                    ...thisObj,\r\n                    [field.c_name]: e.target.value\r\n                })}\r\n                  value={thisObj[field.c_name]}\r\n                  placeholder={field.c_name}\r\n                />\r\n              </Form.Group>\r\n              <br></br>\r\n            </>\r\n            ))}\r\n          <Button variant=\"primary\" onClick={handleSubmit} >\r\n            {editing ? \"Update\" : \"Add\"}\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <table className=\"table table-striped\">\r\n          <thead>\r\n            <tr>\r\n              {fields.map((field) => (<th>{field.c_name}</th>))}\r\n              <th>Operations</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {items.map((item) => (\r\n              <tr key={item.id}>\r\n                {fields.map((field) => (<td>{item[field.c_name]}</td>))}\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-secondary btn-sm btn-block\"\r\n                    onClick={(e) => editItem(item.id)}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-danger btn-sm btn-block\"\r\n                    onClick={(e) => deleteItem(item.id)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport { login } from '../auth'\r\nimport {useNavigate} from 'react-router-dom'\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const LoginPage=()=>{\r\n    \r\n    const {register,handleSubmit,reset,formState:{errors}}=useForm()\r\n\r\n    const navigate = useNavigate()\r\n    \r\n\r\n\r\n    const loginUser=(data)=>{\r\n       console.log(data)\r\n\r\n       const requestOptions={\r\n           method:\"POST\",\r\n           headers:{\r\n               'content-type':'application/json'\r\n           },\r\n           body:JSON.stringify(data)\r\n       }\r\n        \r\n       fetch(`${API}/login`,requestOptions)\r\n       .then(res=>res.json())\r\n       .then(rdata=>{\r\n           console.log(rdata)\r\n           \r\n           if (rdata){\r\n            login(rdata.access_token)\r\n            console.log(data.username) \r\n            navigate('/',{state:{uname:data.username}})\r\n           }\r\n           else{\r\n               alert('Invalid username or password')\r\n           }\r\n\r\n       })\r\n\r\n       reset()\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n        <div className=\"form\">\r\n            <h1>Login Page</h1>\r\n            <form>\r\n                <Form.Group>\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        placeholder=\"Your username\"\r\n                        {...register('username',{required:true,maxLength:25})}\r\n                    />\r\n                </Form.Group>\r\n                {errors.username && <p style={{color:'red'}}><small>Username is required</small></p>}\r\n                {errors.username?.type === \"maxLength\" && <p style={{color:'red'}}><small>Username should be 25 characters</small></p>}\r\n                <br></br>\r\n               \r\n                <Form.Group>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\"\r\n                        placeholder=\"Your password\"\r\n                        {...register('password',{required:true,minLength:8})}\r\n                    />\r\n                </Form.Group>\r\n                {errors.username && <p style={{color:'red'}}><small>Password is required</small></p>}\r\n                {errors.password?.type === \"maxLength\" && <p style={{color:'red'}}>\r\n                    <small>Password should be more than 8 characters</small>\r\n                    </p>}\r\n                <br></br>\r\n                <Form.Group>\r\n                    <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(loginUser)}>Login</Button>\r\n                </Form.Group>\r\n                <br></br>\r\n                <Form.Group>\r\n                    <small>Do not have an account? <Link to='/signup'>Create One</Link></small>\r\n                </Form.Group>\r\n                \r\n            </form>\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Form, Button, Alert } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const SignUpPage = () => {\r\n\r\n\r\n    const { register, handleSubmit, watch, reset, formState: { errors } } = useForm();\r\n    const [show,setShow]=useState(false);\r\n    const [serverResponse,setServerResponse]=useState('');\r\n\r\n    const submitForm = (data) => {\r\n\r\n\r\n        if (data.password === data.confirmPassword) {\r\n\r\n            const requestOptions = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  username: data.username,\r\n                  email: data.email,\r\n                  password: data.password})\r\n            };\r\n\r\n\r\n            fetch(`${API}/signup`, requestOptions)\r\n                .then(res => res.json())\r\n                .then(data =>{\r\n                    console.log(data)\r\n                    setServerResponse(data.message)\r\n                    setShow(true)\r\n                })\r\n                .catch(err => console.log(err))\r\n            // console.log(data);\r\n            reset();\r\n        }\r\n\r\n        else {\r\n            alert(\"Passwords do not match\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // console.log(watch(\"username\"));\r\n    // console.log(watch(\"email\"));\r\n    // console.log(watch(\"password\"));\r\n    // console.log(watch(\"confirmPassword\"));\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n\r\n                \r\n               {show?\r\n               <>\r\n                <Alert variant=\"success\" onClose={() => {setShow(false)\r\n                }} dismissible>\r\n                <p>\r\n                   {serverResponse}\r\n                </p>\r\n                </Alert>\r\n\r\n                <h1>Sign Up Page</h1>\r\n                \r\n                </>\r\n                :\r\n                <h1>Sign Up Page</h1>\r\n               \r\n               }\r\n                <form>\r\n                    <Form.Group>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            placeholder=\"Your username\"\r\n                            {...register(\"username\", { required: true, maxLength: 25 })}\r\n                        />\r\n\r\n                        {errors.username && <small style={{ color: \"red\" }}>Username is required</small>}\r\n                        {errors.username?.type === \"maxLength\" && <p style={{ color: \"red\" }}><small>Max characters should be 25 </small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"email\"\r\n                            placeholder=\"Your email\"\r\n                            {...register(\"email\", { required: true, maxLength: 80 })}\r\n                        />\r\n\r\n                        {errors.email && <p style={{ color: \"red\" }}><small>Email is required</small></p>}\r\n\r\n                        {errors.email?.type === \"maxLength\" && <p style={{ color: \"red\" }}><small>Max characters should be 80</small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\"\r\n                            placeholder=\"Your password\"\r\n                            {...register(\"password\", { required: true, minLength: 8 })}\r\n\r\n                        />\r\n\r\n                        {errors.password && <p style={{ color: \"red\" }}><small>Password is required</small></p>}\r\n                        {errors.password?.type === \"minLength\" && <p style={{ color: \"red\" }}><small>Min characters should be 8</small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Your password\"\r\n                            {...register(\"confirmPassword\", { required: true, minLength: 8 })}\r\n                        />\r\n                        {errors.confirmPassword && <p style={{ color: \"red\" }}><small>Confirm Password is required</small></p>}\r\n                        {errors.confirmPassword?.type === \"minLength\" && <p style={{ color: \"red\" }}><small>Min characters should be 8</small></p>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(submitForm)}>SignUp</Button>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <small>Already have an account, <Link to='/login'>Log In</Link></small>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const OpsLog = () => {\r\n\r\n  let [logs, setLogs] = useState([]);\r\n\r\n  const token = localStorage.getItem('REACT_TOKEN_AUTH_KEY');\r\n\r\n  const getLogs = async () => {\r\n    const res = await fetch(`${API}/logs`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        'Authorization': `Bearer ${JSON.parse(token)}`\r\n      }\r\n    });\r\n    const data = await res.json();\r\n    setLogs(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLogs();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <table className=\"table table-striped\">\r\n          <thead>\r\n            <tr style={{fontWeight: 'bold'}}>\r\n              <th>User Name</th>\r\n              <th>Timestamp</th>\r\n              <th>Database</th>\r\n              <th>Table Name</th>\r\n              <th>Operation</th>\r\n              <th>Operation Object ID</th>\r\n              <th>Request Body</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {logs.map((alog) => (\r\n              <tr key={alog.id}>\r\n                <td>{alog.username}</td>\r\n                <td>{alog.timestamp}</td>\r\n                <td>{alog.db_uri}</td>\r\n                <td>{alog.tb_name}</td>\r\n                <td>{alog.operation}</td>\r\n                <td>{alog.ops_obj_id}</td>\r\n                <td>{alog.request_body}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {Form, Button, Dropdown} from 'react-bootstrap'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst API = process.env.REACT_APP_API;\r\n\r\nexport const DBForm=()=>{\r\n\r\n    const {register,handleSubmit}=useForm()\r\n    \r\n    const [uri, setUri] = useState(\"\");\r\n    const [tablelist, setTablelist] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [checkedColumns, setCheckedColumns] = useState({});\r\n\r\n    const [showTableList, setShowtablelist] = useState(false);\r\n    const [showColumnList, setShowColumnList] = useState(false);\r\n\r\n    const [curTable, setCurTable] = useState(\"Table Name\");\r\n    \r\n    \r\n\r\n    const navigate = useNavigate()\r\n\r\n    const connectDB = async (e) => {\r\n        e.preventDefault();\r\n        // console.log(data);\r\n\r\n        const res = await fetch(`${API}/dbset`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                uri:uri\r\n            }),\r\n          });\r\n        const data = await res.json();\r\n        setTablelist(data);\r\n        setShowtablelist(true);\r\n    }\r\n\r\n    const handleSelectTable = async (e) => {\r\n        // console.log(e);\r\n        setCurTable(e);\r\n        const res = await fetch(`${API}/tbset`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                table_name:e\r\n            }),\r\n        });\r\n        const data = await res.json();\r\n        setColumns(data);\r\n        setShowColumnList(true);\r\n        // navigate('/it',{state:{columns:data}});\r\n    }\r\n\r\n    const toggleHandler = (column, index) => () => {\r\n        setCheckedColumns({\r\n            ...checkedColumns,\r\n            [index]: checkedColumns[index] ? null : column\r\n        });\r\n    }\r\n\r\n    const toNextPage = (e) => {\r\n        var arr = Object.values(checkedColumns).filter(e => {\r\n            return e !== null;\r\n        }); \r\n        // console.log(arr);\r\n        navigate('/it',{state:{columns:arr}});\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n                <h1>Database Setting</h1>\r\n                <br></br>\r\n                <Form>\r\n                    <Row className=\"align-items-center\">\r\n                        <Col xs=\"auto\">\r\n                            <Form.Label>URI:</Form.Label>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"sqlite:///myweb.db\"\r\n                                onChange={(e) => setUri(e.target.value)}\r\n                                value={uri}\r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Button variant=\"primary\" onClick={connectDB}>Connect</Button>\r\n                        </Col>     \r\n                    </Row>\r\n                    <br></br>\r\n                    {showTableList &&\r\n                        <Form.Group>\r\n                            <Dropdown onSelect={handleSelectTable}>\r\n                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                    {curTable}\r\n                                </Dropdown.Toggle>\r\n                                <Dropdown.Menu>\r\n                                    {tablelist.map((table) => (\r\n                                        <Dropdown.Item eventKey={table}>{table}</Dropdown.Item>\r\n                                    ))}                            \r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Form.Group>\r\n                    }\r\n\r\n                    {showColumnList &&\r\n                        <Form.Group>\r\n                            {columns.map((column, index) => (\r\n                                <tr\r\n                                    key={index}\r\n                                    style={{\r\n                                    display: \"flex\",\r\n                                    width: \"150px\"\r\n                                    }}\r\n                                >\r\n                                    <input\r\n                                    onChange={toggleHandler(column, index)}\r\n                                    checked={checkedColumns[index]}\r\n                                    style={{ margin: \"20px\" }}\r\n                                    type=\"checkbox\"\r\n                                    />\r\n                                    <td style={{ margin: \"20px\" }}>{column.c_name}</td>\r\n                                    <td style={{ margin: \"20px\" }}>{column.c_type}</td>\r\n                                </tr>\r\n                            ))}\r\n                            <br></br>\r\n                            <Button variant=\"primary\" onClick={toNextPage}>Next</Button>\r\n                        </Form.Group>\r\n                    }\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nimport { Navbar } from \"./components/Navbar\";\r\nimport { Permission } from \"./components/Permission\";\r\nimport { ItemsPage } from \"./components/Items\";\r\nimport { LoginPage } from \"./components/Login\";\r\nimport { SignUpPage } from \"./components/SignUp\";\r\nimport { OpsLog } from \"./components/OpsLog\";\r\nimport { DBForm } from \"./components/Dbsetting\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"container p-4\">\r\n        <Routes>\r\n          <Route path=\"/perms\" element={<Permission/>} />\r\n          <Route path=\"/login\" element={<LoginPage/>} />\r\n          <Route path=\"/signup\" element={<SignUpPage/>} />\r\n          <Route path=\"/it\" element={<ItemsPage/>} />\r\n          <Route path=\"/\" element={<DBForm/>} />\r\n          <Route path=\"/opslog\" element={<OpsLog/>} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootswatch/dist/lux/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}